apply plugin: "idea"
apply plugin: "java"

group = "com.ssda.guice"
version = "1.0"

repositories {
    mavenCentral()
    maven {
        url "https://repository.cloudera.com/artifactory/cloudera-repos/"
    }
}

idea {
    module {
        //if you love browsing Javadoc
        // downloadJavadoc = true

        //and hate reading sources :)
        downloadSources = true
    }
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    //compile "com.google.inject:guice:3.0"
    compile "org.apache.hadoop:hadoop-client:2.0.0-mr1-cdh4.4.0"
    compile "org.apache.hive:hive-jdbc:0.10.0-cdh4.4.0"
    compile 'org.mongodb:mongo-java-driver:2.10.1'
 //   compile 'com.yammer.dropwizard:dropwizard-core:0.6.2'
    compile 'com.hubspot.dropwizard:dropwizard-guice:0.6.2'


    //compile "org.apache.hive:hive-jdbc:0.10.0-cdh4.3.2"
    testCompile "junit:junit:4.8.2"
    testCompile "org.hamcrest:hamcrest-core:1.2.1"

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

//task ssdajar(type: Jar) {
//    from files(sourceSets.main.output.classesDir)
//    from files(sourceSets.main.output.resourcesDir)
//    from {configurations.compile.collect {zipTree(it)}}
//
//
//    manifest {
//        attributes 'Main-Class': 'com.ssda.api.SSDAService'
//    }
//}



// Create the executable jar and exclude some certificates
jar {

    manifest {
        attributes "Implementation-Title": "SSDA Service"
        attributes "Implementation-Version": '1.0'
        attributes "Main-Class" : 'com.ssda.api.SSDAService'
    }

    // remove the security files (from mail.jar / activation.jar) so that the jar will be executable.
    doFirst {
        from (configurations.runtime.resolve().collect {

                                                         if(it.toString().contains("log4j-over-slf4j-1.7.4.jar") || it.toString().contains("servlet-api")) {
                                                             println('Not Adding ' + it.toString())
                                                             return false
                                                         } else {
                                                             println('Adding ' + it.toString())
                                                             it.isDirectory() ? it : zipTree(it) }
                                                        }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
}
